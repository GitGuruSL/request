import 'package:flutter/material.dart';
import '../../services/country_service.dart';
import '../../services/rest_auth_service.dart';
import '../../services/module_service.dart';
import '../../models/request_model.dart';
import '../../screens/unified_request_response/unified_request_create_screen.dart';
import '../../models/enhanced_user_model.dart';
import '../../theme/app_theme.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String? _selectedCountry;
  String? _currencySymbol;
  List<RequestModel> _requests = [];
  bool _isLoading = true;
  bool _usingFallback = false; // Indicates index-based query fallback in use
  Map<String, dynamic>? _userData;

  @override
  void initState() {
    super.initState();
    _loadCountryData();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    try {
      _userData = await AuthService.instance.getCurrentUserData();
      setState(() {});
    } catch (e) {
      print('Error loading user data: $e');
    }
  }

  Future<void> _loadCountryData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Get user's selected country - use country CODE for module configuration
      _selectedCountry = CountryService
          .instance.countryCode; // Use country code (LK) not name (Sri Lanka)
      _currencySymbol = CountryService.instance.getCurrencySymbol();

      // Load country-filtered requests
      await _loadRequests();
    } catch (e) {
      print('Error loading country data: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadRequests() async {
    try {
      Query query = CountryService.instance.getCountryFilteredQuery(
          FirebaseFirestore.instance.collection('requests'));
      final querySnapshot = await query.limit(20).get();
      _requests = querySnapshot.docs
          .map(
              (doc) => RequestModel.fromMap(doc.data() as Map<String, dynamic>))
          .toList();
      _usingFallback = false; // succeeded with primary indexed query
    } on FirebaseException catch (e) {
      if (e.code == 'failed-precondition') {
        // Suppress noisy repeating logs; set fallback flag for UI
        _usingFallback = true;
        try {
          final fallbackSnapshot = await FirebaseFirestore.instance
              .collection('requests')
              .orderBy('createdAt', descending: true)
              .limit(20)
              .get();
          _requests = fallbackSnapshot.docs
              .map((doc) =>
                  RequestModel.fromMap(doc.data() as Map<String, dynamic>))
              .toList();
        } catch (inner) {
          debugPrint('HomeScreen fallback query failed: $inner');
        }
      } else {
        debugPrint('HomeScreen error loading requests: $e');
      }
    } catch (e) {
      debugPrint('HomeScreen unexpected error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false, // Remove back button
        title: Row(
          children: [
            // User Name on the left
            Expanded(
              child: Text(
                _getUserName(),
                style: TextStyle(
                  color: AppTheme.textPrimary,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
            // Notification and Profile on the right
            IconButton(
              icon: Icon(
                Icons.notifications_outlined,
                color: AppTheme.textSecondary,
              ),
              onPressed: _showNotifications,
            ),
            const SizedBox(width: 8),
            GestureDetector(
              onTap: _showProfileMenu,
              child: CircleAvatar(
                radius: 16,
                backgroundColor:
                    Theme.of(context).colorScheme.primary.withOpacity(0.1),
                backgroundImage: _userData?['profilePicture'] != null
                    ? NetworkImage(_userData!['profilePicture'])
                    : null,
                child: _userData?['profilePicture'] == null
                    ? Icon(
                        Icons.person,
                        color: Theme.of(context).colorScheme.primary,
                        size: 20,
                      )
                    : null,
              ),
            ),
            const SizedBox(width: 16),
          ],
        ),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                if (_usingFallback)
                  Padding(
                    padding: const EdgeInsets.fromLTRB(16, 12, 16, 0),
                    child: Material(
                      color: Colors.amber.shade100,
                      borderRadius: BorderRadius.circular(8),
                      child: ListTile(
                        dense: true,
                        leading:
                            const Icon(Icons.info_outline, color: Colors.amber),
                        title: const Text('Limited filtering in effect'),
                        subtitle: const Text(
                            'Optimized results will appear once indexing completes.'),
                        trailing: IconButton(
                          tooltip: 'Retry full query',
                          icon: const Icon(Icons.refresh),
                          onPressed: () async {
                            setState(() => _isLoading = true);
                            await _loadRequests();
                            if (mounted) setState(() => _isLoading = false);
                          },
                        ),
                      ),
                    ),
                  ),
                // Country Info Card
                Card(
                  margin: const EdgeInsets.all(16),
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Your Location',
                          style: Theme.of(context).textTheme.titleMedium,
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            Icon(Icons.location_on,
                                color: Theme.of(context).colorScheme.primary),
                            const SizedBox(width: 8),
                            Text(
                              CountryService.instance.countryName ??
                                  _selectedCountry ??
                                  'No country selected',
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                            const Spacer(),
                            if (_currencySymbol != null)
                              Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 8, vertical: 4),
                                decoration: BoxDecoration(
                                  color: Theme.of(context)
                                      .colorScheme
                                      .primary
                                      .withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(4),
                                ),
                                child: Text(
                                  _currencySymbol!,
                                  style: TextStyle(
                                    color:
                                        Theme.of(context).colorScheme.primary,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Showing requests from your country only',
                          style: Theme.of(context).textTheme.bodySmall,
                        ),
                      ],
                    ),
                  ),
                ),

                // Clean Home Content - Removed Requests List
                Expanded(
                  child: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.home_outlined,
                          size: 80,
                          color: Colors.grey[300],
                        ),
                        const SizedBox(height: 24),
                        Text(
                          'Welcome to ${CountryService.instance.countryName ?? 'Request Marketplace'}',
                          style: Theme.of(context)
                              .textTheme
                              .headlineSmall
                              ?.copyWith(
                                color: Colors.grey[600],
                                fontWeight: FontWeight.w500,
                              ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Tap the + button to create your first request',
                          style:
                              Theme.of(context).textTheme.bodyLarge?.copyWith(
                                    color: Colors.grey[500],
                                  ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: _createNewRequest,
        icon: const Icon(Icons.add),
        label: const Text('New Request'),
      ),
    );
  }

  IconData _getRequestIcon(String type) {
    switch (type.toLowerCase()) {
      case 'item':
        return Icons.shopping_bag;
      case 'service':
        return Icons.build;
      case 'ride':
        return Icons.directions_car;
      case 'delivery':
        return Icons.local_shipping;
      case 'rental':
        return Icons.key;
      default:
        return Icons.help_outline;
    }
  }

  Future<void> _changeCountry() async {
    // Navigate back to welcome screen to change country
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Change Country'),
        content: const Text(
            'Do you want to change your country? This will take you back to the welcome screen.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushReplacementNamed(context, '/welcome');
            },
            child: const Text('Change'),
          ),
        ],
      ),
    );
  }

  void _createNewRequest() {
    if (_selectedCountry == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a country first'),
        ),
      );
      return;
    }

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => _DynamicRequestTypesModal(
        countryCode: _selectedCountry!,
      ),
    );
  }

  void _showRequestDetail(RequestModel request) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(request.title),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Type: ${request.type}'),
            const SizedBox(height: 8),
            Text('Description: ${request.description}'),
            const SizedBox(height: 8),
            if (request.budget != null)
              Text(
                  'Budget: ${CountryService.instance.formatPrice(request.budget!)}'),
            const SizedBox(height: 8),
            Text('Location: ${request.location?.city ?? 'Not specified'}'),
            const SizedBox(height: 8),
            Text('Status: ${request.status}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showComingSoon('Respond to Request');
            },
            child: const Text('Respond'),
          ),
        ],
      ),
    );
  }

  void _showComingSoon(String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$feature - Coming Soon!'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
      ),
    );
  }

  String _getUserName() {
    final currentUser = AuthService.instance.currentUser;

    // Try to get name from user data first
    if (_userData != null) {
      if (_userData!['fullName'] != null &&
          _userData!['fullName'].toString().isNotEmpty) {
        return _userData!['fullName'];
      }
      if (_userData!['name'] != null &&
          _userData!['name'].toString().isNotEmpty) {
        return _userData!['name'];
      }
    }

    // Fallback to Firebase Auth display name
    if (currentUser?.displayName != null &&
        currentUser!.displayName!.isNotEmpty) {
      return currentUser.displayName!;
    }

    // Fallback to email/phone
    if (currentUser?.email != null) {
      return currentUser!.email!.split('@').first;
    }

    if (currentUser?.phoneNumber != null) {
      return currentUser!.phoneNumber!;
    }

    return 'Guest User';
  }

  void _showNotifications() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Notifications'),
        content: const Text('No new notifications at this time.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _showProfileMenu() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.symmetric(vertical: 20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.person),
              title: const Text('Profile'),
              onTap: () {
                Navigator.pop(context);
                _showComingSoon('Profile');
              },
            ),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text('Settings'),
              onTap: () {
                Navigator.pop(context);
                _showComingSoon('Settings');
              },
            ),
            ListTile(
              leading: const Icon(Icons.language),
              title: const Text('Change Country'),
              onTap: () {
                Navigator.pop(context);
                _changeCountry();
              },
            ),
            ListTile(
              leading: const Icon(Icons.logout),
              title: const Text('Logout'),
              onTap: () {
                Navigator.pop(context);
                _logout();
              },
            ),
          ],
        ),
      ),
    );
  }

  void _logout() async {
    try {
      await AuthService.instance.signOut();
      if (mounted) {
        Navigator.pushReplacementNamed(context, '/welcome');
      }
    } catch (e) {
      print('Error during logout: $e');
    }
  }
}

/// Dynamic Modal for showing available request types based on country configuration
class _DynamicRequestTypesModal extends StatefulWidget {
  final String countryCode;

  const _DynamicRequestTypesModal({
    required this.countryCode,
  });

  @override
  State<_DynamicRequestTypesModal> createState() =>
      _DynamicRequestTypesModalState();
}

class _DynamicRequestTypesModalState extends State<_DynamicRequestTypesModal> {
  CountryModules? _countryModules;
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _loadCountryModules();
  }

  Future<void> _loadCountryModules() async {
    try {
      print('🔄 Loading modules for country: ${widget.countryCode}');
      final modules = await ModuleService.getCountryModules(widget.countryCode);

      if (mounted) {
        setState(() {
          _countryModules = modules;
          _isLoading = false;
          if (!modules.success) {
            _error = modules.error ?? 'Failed to load modules';
          }
        });
      }
    } catch (error) {
      print('❌ Error loading country modules: $error');
      if (mounted) {
        setState(() {
          _isLoading = false;
          _error = error.toString();
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.7,
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'Create New Request',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const SizedBox(height: 16),
          if (_isLoading)
            const Center(
              child: Padding(
                padding: EdgeInsets.all(32.0),
                child: CircularProgressIndicator(),
              ),
            )
          else if (_error != null)
            _buildErrorWidget()
          else if (_countryModules != null)
            _buildModulesList()
          else
            const Center(
              child: Text('No modules configured for this country'),
            ),
        ],
      ),
    );
  }

  Widget _buildErrorWidget() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          const Icon(
            Icons.error_outline,
            color: Colors.orange,
            size: 48,
          ),
          const SizedBox(height: 16),
          Text(
            'Error loading modules',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Text(
            _error!,
            style: Theme.of(context).textTheme.bodyMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _loadCountryModules,
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }

  Widget _buildModulesList() {
    final enabledModules =
        ModuleService.getEnabledModulesForDisplay(_countryModules!.modules);

    if (enabledModules.isEmpty) {
      return const Padding(
        padding: EdgeInsets.all(32.0),
        child: Column(
          children: [
            Icon(
              Icons.info_outline,
              color: Colors.blue,
              size: 48,
            ),
            SizedBox(height: 16),
            Text(
              'No request types available',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'Contact your administrator to enable request modules for your country.',
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    return Flexible(
      child: SingleChildScrollView(
        child: Column(
          children: enabledModules
              .map((moduleInfo) => _buildModuleTile(moduleInfo))
              .toList(),
        ),
      ),
    );
  }

  Widget _buildModuleTile(ModuleInfo moduleInfo) {
    return ListTile(
      leading: Icon(
        _getIconForModule(moduleInfo.iconName),
        color: moduleInfo.color,
      ),
      title: Text(moduleInfo.name),
      subtitle: Text(moduleInfo.subtitle),
      onTap: () => _handleModuleTap(moduleInfo.id),
    );
  }

  IconData _getIconForModule(String iconName) {
    switch (iconName) {
      case 'Icons.shopping_bag':
        return Icons.shopping_bag;
      case 'Icons.build':
        return Icons.build;
      case 'Icons.key':
        return Icons.key;
      case 'Icons.local_shipping':
        return Icons.local_shipping;
      case 'Icons.directions_car':
        return Icons.directions_car;
      case 'Icons.compare_arrows':
        return Icons.compare_arrows;
      default:
        return Icons.help_outline;
    }
  }

  void _handleModuleTap(String moduleId) {
    Navigator.pop(context);

    switch (moduleId) {
      case 'item':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) =>
                const UnifiedRequestCreateScreen(initialType: RequestType.item),
          ),
        );
        break;
      case 'service':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const UnifiedRequestCreateScreen(
                initialType: RequestType.service),
          ),
        );
        break;
      case 'rent':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const UnifiedRequestCreateScreen(
                initialType: RequestType.rental),
          ),
        );
        break;
      case 'delivery':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const UnifiedRequestCreateScreen(
                initialType: RequestType.delivery),
          ),
        );
        break;
      case 'ride':
        Navigator.pushNamed(context, '/create-ride-request');
        break;
      case 'price':
        Navigator.pushNamed(context, '/price');
        break;
      default:
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Module "$moduleId" not implemented yet'),
          ),
        );
        break;
    }
  }
}
