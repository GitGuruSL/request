rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // TEST COLLECTION FOR DEBUGGING
    // ========================================
    
    // Allow test collection for debugging connectivity
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }

    // ========================================
    // TEMPORARY ADMIN ACCESS FOR DEBUGGING
    // ========================================
    
    // Allow admin panel to read users collection (REMOVE IN PRODUCTION!)
    match /users/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging - allow updates/deletes for business management
    }
    
    // Allow admin panel to read requests collection (REMOVE IN PRODUCTION!)
    match /requests/{document=**} {
      allow read: if true;  // Temporary for admin debugging
    }
    
    // Allow admin panel to read and update businesses collection
    match /businesses/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging
    }
    
    // Allow unified OTP system collections
    match /unified_otp_verifications/{document=**} {
      allow read, write: if request.auth != null;  // Allow authenticated users to use OTP system
    }
    
    match /verification_audit_log/{document=**} {
      allow read, write: if request.auth != null;  // Allow authenticated users to create verification logs
    }
    
    // Allow admin panel to read and update categories collection
    match /categories/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    // Allow admin panel to read and update products collections
    match /master_products/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging
    }
    
    match /business_products/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging
    }
    
    match /product_categories/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging
    }
    
    // Allow admin panel to read and update brands collection
    match /brands/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    // Allow admin panel to read and update subcategories collection
    match /subcategories/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    // Allow admin panel to read and update product variables collections
    match /product_colors/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    match /product_sizes/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    match /product_materials/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    match /custom_product_variables/{document=**} {
      allow read, write: if true;  // Allow unauthenticated access for admin panel
    }
    
    // Allow authenticated users to read product variables for business products
    match /productVariables/{document=**} {
      allow read: if true;  // Allow all reads for product variables
      allow write: if true;  // Allow admin panel to write product variables
    }

    // Temporary admin access for debugging (REMOVE IN PRODUCTION!)
    // Allow read access to drivers collection for admin panel
    match /drivers/{document=**} {
      allow read, write: if true;  // Temporary for admin debugging - allow updates
    }

    // Users can only read and write their own data.
    // They can create their own user document.
    // Allow authenticated users to read basic profile info needed for requests
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to read basic profile info for request display
      allow read: if request.auth != null;
      // Allow unauthenticated reads for limited user existence checks (login flow)
      allow read: if request.auth == null && 
                     request.query != null &&
                     request.query.limit <= 1;
    }

    // Allow authenticated users to register as drivers
    match /drivers/{driverId} {
      allow create: if request.auth != null && request.auth.uid == driverId;
      allow read, update: if request.auth != null && request.auth.uid == driverId;
    }

    // Allow authenticated users to register as service providers
    match /service_providers/{serviceProviderId} {
      allow create: if request.auth != null && request.auth.uid == serviceProviderId;
      allow read, update: if request.auth != null && request.auth.uid == serviceProviderId;
      // Allow users to read public service provider profiles when browsing services
      allow read: if request.auth != null;
    }

    // Allow users to create activity logs for themselves.
    // Users can only read their own activity logs.
    match /activities/{activityId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Allow users to create activity logs under their user document.
    match /users/{userId}/activity_logs/{activityId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to manage their own requests.
    // Users can only read, create, update, and delete their own requests.
    // Temporary: Allow any authenticated user to update requests (for responseCount)
    match /requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null; // Simplified for now - any authenticated user can update
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Allow users to create responses to any request.
    // Users can read responses to requests they own or responses they created.
    // Allow querying responses for a specific request if user owns the request
    match /responses/{responseId} {
      allow create: if request.auth != null && 
        request.resource.data.responderId == request.auth.uid;
      allow read: if request.auth != null && (
        resource.data.responderId == request.auth.uid ||
        get(/databases/$(database)/documents/requests/$(resource.data.requestId)).data.userId == request.auth.uid
      );
      // Responder can update their own response (but not change responderId)
      allow update: if request.auth != null && 
        resource.data.responderId == request.auth.uid &&
        request.resource.data.responderId == request.auth.uid;
      // Request owner can update any response status for their request (for accepting/rejecting)
      allow update: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/requests/$(resource.data.requestId)).data.userId;
    }

    // Phone verification collection
    match /phone_verifications/{verificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }

    // Phone OTP verifications collection for custom OTP system
    match /phone_otp_verifications/{otpId} {
      // Allow authenticated users to create and read their own OTP records
      // The otpId format is: ${userId}_${phoneNumber}
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        otpId.matches('^' + request.auth.uid + '_.*');
      allow read, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        otpId.matches('^' + request.auth.uid + '_.*');
    }

    // Email OTP verifications collection for email verification
    match /email_otp_verifications/{email} {
      // Allow anyone to create OTP records (for registration)
      // Allow reading/updating only for email verification process
      allow create, read, update: if true;
      allow delete: if request.auth != null;
    }

    // Email OTP verifications collection for email OTP system
    match /email_otp_verifications/{email} {
      // Allow anyone to create, read, update email OTP records (for registration flow)
      // This is needed for email verification during user registration (before authentication)
      allow read, write: if true;
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read, create, update: if request.auth != null && (
        // Allow if user is in participants (for existing conversations)
        (resource != null && resource.data != null && request.auth.uid in resource.data.participants) ||
        // Allow if being created and user is in participants (for new conversations)
        (request.resource != null && request.resource.data != null && request.auth.uid in request.resource.data.participants) ||
        // Allow if conversation ID contains user's ID (for checking existence before creation)
        conversationId.split('_').hasAny([request.auth.uid])
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.recipientId;
      // Users can create notifications for others
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      // Users can update their own notifications (mark as read, etc.)
      allow update: if request.auth != null && request.auth.uid == resource.data.recipientId;
      // Users can delete their own notifications
      allow delete: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }

    // Ride tracking collection for ride management
    match /ride_tracking/{trackingId} {
      // Allow request owner and accepted driver to create ride tracking
      allow create: if request.auth != null && (
        // Request owner can create tracking when accepting a driver response
        request.auth.uid == request.resource.data.requesterId ||
        // Driver can create tracking when their response is accepted
        request.auth.uid == request.resource.data.driverId
      );
      // Both request owner and driver can read and update tracking
      allow read, update: if request.auth != null && (
        request.auth.uid == resource.data.requesterId ||
        request.auth.uid == resource.data.driverId
      );
    }

    // Universal response tracking collection for all request types
    match /response_tracking/{trackingId} {
      // Allow request owner and responder to create tracking
      allow create: if request.auth != null && (
        // Request owner can create tracking when accepting a response
        request.auth.uid == request.resource.data.requesterId ||
        // Responder can create tracking when their response is accepted
        request.auth.uid == request.resource.data.responderId
      );
      // Both request owner and responder can read and update tracking
      allow read, update: if request.auth != null && (
        request.auth.uid == resource.data.requesterId ||
        request.auth.uid == resource.data.responderId
      );
    }

    // Product categories collection - readable by all, writable by authenticated users
    match /product_categories/{categoryId} {
      allow read: if true; // Categories are public
      allow write: if request.auth != null; // Authenticated users can manage categories via admin panel
    }

    // Master products collection - readable by all, writable by authenticated users
    match /master_products/{productId} {
      allow read: if true; // Products are public for comparison
      allow create: if request.auth != null; // Authenticated users can add products
      allow update: if request.auth != null; // Allow updates for management
      allow delete: if request.auth != null; // Allow deletion for management
    }

    // Business products collection - businesses can manage their own listings
    match /business_products/{businessProductId} {
      allow read: if true; // Product listings are public for comparison
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.businessId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.businessId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.businessId;
    }

    // Business profiles collection
    match /businesses/{businessId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read: if true; // Business profiles are public
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // Business verification collection
    match /business_verifications/{businessId} {
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/businesses/$(businessId)) &&
        get(/databases/$(database)/documents/businesses/$(businessId)).data.userId == request.auth.uid;
      allow read, update: if request.auth != null && 
        exists(/databases/$(database)/documents/businesses/$(businessId)) &&
        get(/databases/$(database)/documents/businesses/$(businessId)).data.userId == request.auth.uid;
    }

    // Business email verification tokens collection
    match /business_email_verifications/{businessId} {
      allow create, read, update: if request.auth != null && 
        exists(/databases/$(database)/documents/businesses/$(businessId)) &&
        get(/databases/$(database)/documents/businesses/$(businessId)).data.userId == request.auth.uid;
    }

    // Business phone OTP verifications collection
    match /business_phone_verifications/{businessId} {
      allow create, read, update: if request.auth != null && 
        exists(/databases/$(database)/documents/businesses/$(businessId)) &&
        get(/databases/$(database)/documents/businesses/$(businessId)).data.userId == request.auth.uid;
    }

    // Product clicks collection for revenue tracking
    match /product_clicks/{clickId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      // Business owners can read clicks for their products
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/business_products/$(resource.data.businessProductId)) &&
        get(/databases/$(database)/documents/business_products/$(resource.data.businessProductId)).data.businessId == request.auth.uid;
    }

    // Default deny all reads and writes - This should be the LAST rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
