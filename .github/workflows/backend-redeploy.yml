name: Backend Redeploy

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Image tag or full image ref (e.g., latest, <sha>, or ghcr.io/owner/request-backend:<tag>)'
        required: false
        default: 'latest'
      public:
        description: 'Bind container to 0.0.0.0 (instead of 127.0.0.1)'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Target environment'
        type: choice
        options:
          - production
          - staging
        default: production

permissions:
  contents: read
  packages: write

jobs:
  redeploy:
    name: Redeploy backend via SSH
    runs-on: ubuntu-latest
    concurrency:
      group: backend-redeploy-${{ github.event.inputs.environment }}
      cancel-in-progress: true
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Prepare lowercase owner and image
        id: vars
        run: |
          set -e
          OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          IMAGE_INPUT='${{ github.event.inputs.image }}'
          if [[ "$IMAGE_INPUT" == ghcr.io/* ]]; then
            IMAGE_FULL="$IMAGE_INPUT"
          else
            IMAGE_FULL="ghcr.io/${OWNER_LOWER}/request-backend:${IMAGE_INPUT}"
          fi
          echo "owner_lower=$OWNER_LOWER" >> $GITHUB_OUTPUT
          echo "image=$IMAGE_FULL" >> $GITHUB_OUTPUT

      - name: Redeploy to Production
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            IMAGE='${{ steps.vars.outputs.image }}'
            echo "[Redeploy] Image: $IMAGE"
            if [ -n "$GHCR_TOKEN" ] && [ -n "$GHCR_USER" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            if [ ! -f /opt/request-backend/redeploy.sh ]; then
              echo "redeploy.sh not found at /opt/request-backend/redeploy.sh" >&2
              exit 1
            fi
            CMD="/opt/request-backend/redeploy.sh \"$IMAGE\""
            if [ "${{ github.event.inputs.public }}" = "true" ]; then
              CMD="$CMD --public"
            fi
            echo "[Redeploy] Running: $CMD"
            bash -c "$CMD"
            TAG=$(echo "$IMAGE" | awk -F: '{print $NF}')
            echo "$TAG" | sudo tee /opt/request-backend/last_successful.sha > /dev/null
            docker image prune -f

      - name: Redeploy to Staging
        if: ${{ github.event.inputs.environment == 'staging' }}
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.STAGING_DEPLOY_HOST }}
          username: ${{ secrets.STAGING_DEPLOY_USER }}
          key: ${{ secrets.STAGING_DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            IMAGE='${{ steps.vars.outputs.image }}'
            echo "[Redeploy] Image: $IMAGE"
            if [ -n "$GHCR_TOKEN" ] && [ -n "$GHCR_USER" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            if [ ! -f /opt/request-backend/redeploy.sh ]; then
              echo "redeploy.sh not found at /opt/request-backend/redeploy.sh" >&2
              exit 1
            fi
            CMD="/opt/request-backend/redeploy.sh \"$IMAGE\""
            if [ "${{ github.event.inputs.public }}" = "true" ]; then
              CMD="$CMD --public"
            fi
            echo "[Redeploy] Running: $CMD"
            bash -c "$CMD"
            TAG=$(echo "$IMAGE" | awk -F: '{print $NF}')
            echo "$TAG" | sudo tee /opt/request-backend/last_successful.sha > /dev/null
            docker image prune -f
