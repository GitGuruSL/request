name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    concurrency:
      group: backend-build-${{ github.ref }}
      cancel-in-progress: false
    env:
      GHCR_USER: ${{ secrets.GHCR_USER }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare lowercase owner
        id: vars
        run: echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        if: ${{ env.GHCR_USER != '' && env.GHCR_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Log in to GHCR (fallback to GITHUB_TOKEN)
        if: ${{ env.GHCR_USER == '' || env.GHCR_TOKEN == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lower }}/request-backend:latest
            ghcr.io/${{ steps.vars.outputs.owner_lower }}/request-backend:${{ github.sha }}

  deploy:
    name: Deploy to Server (SSH)
    runs-on: ubuntu-latest
    needs: build-and-push
  if: ${{ github.ref == 'refs/heads/main' && secrets.DEPLOY_HOST != '' && secrets.DEPLOY_USER != '' && secrets.DEPLOY_SSH_KEY != '' }}
    environment: production
    concurrency:
      group: backend-deploy-production
      cancel-in-progress: true
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            REPO_OWNER="${{ github.repository_owner }}"
            IMAGE_OWNER="$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')"
            IMAGE_BASE="ghcr.io/${IMAGE_OWNER}/request-backend"
            IMAGE_TAG="${{ github.sha }}"
            IMAGE="$IMAGE_BASE:$IMAGE_TAG"

            echo "[Deploy] Logging into GHCR if creds provided"
            if [ -n "$GHCR_TOKEN" ] && [ -n "$GHCR_USER" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            echo "[Deploy] Pull image $IMAGE"
            docker pull "$IMAGE"

            sudo mkdir -p /opt/request-backend
            sudo chown $USER:$USER /opt/request-backend

            if ! command -v curl >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y curl
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y curl
              fi
            fi

            echo "[Deploy] Stop old container if exists"
            if [ "$(docker ps -aq -f name=request-backend)" ]; then
              docker rm -f request-backend || true
            fi

            echo "[Deploy] Start container"
            docker run -d \
              --name request-backend \
              --restart unless-stopped \
              --env-file /opt/request-backend/production.env \
              -p 127.0.0.1:3001:3001 \
              "$IMAGE"

            echo "[Deploy] Health check"
            for i in $(seq 1 30); do
              if curl -fsS http://127.0.0.1:3001/health >/dev/null 2>&1; then
                echo "[Deploy] Service healthy"
                break
              fi
              echo "[Deploy] Waiting for service... ($i/30)"
              sleep 2
            done
            curl -fsS http://127.0.0.1:3001/health >/dev/null

            echo "$IMAGE_TAG" | sudo tee /opt/request-backend/last_successful.sha > /dev/null
            docker image prune -f

      - name: Rollback on failure
        if: ${{ failure() }}
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            REPO_OWNER="${{ github.repository_owner }}"
            IMAGE_OWNER="$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')"
            IMAGE_BASE="ghcr.io/${IMAGE_OWNER}/request-backend"

            echo "[Rollback] Attempting rollback"
            if [ -f /opt/request-backend/last_successful.sha ]; then
              LAST_SHA="$(cat /opt/request-backend/last_successful.sha)"
              IMAGE="$IMAGE_BASE:$LAST_SHA"
              docker pull "$IMAGE"
              if [ "$(docker ps -aq -f name=request-backend)" ]; then
                docker rm -f request-backend || true
              fi
              docker run -d \
                --name request-backend \
                --restart unless-stopped \
                --env-file /opt/request-backend/production.env \
                -p 127.0.0.1:3001:3001 \
                "$IMAGE"
              for i in $(seq 1 30); do
                if curl -fsS http://127.0.0.1:3001/health >/dev/null 2>&1; then
                  echo "[Rollback] Service healthy after rollback"
                  exit 0
                fi
                echo "[Rollback] Waiting for service... ($i/30)"
                sleep 2
              done
              echo "[Rollback] Health check failed after rollback" >&2
              exit 1
            else
              echo "[Rollback] No last_successful.sha found; manual intervention required" >&2
              exit 1
            fi
